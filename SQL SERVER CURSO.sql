/* CLICAR EM NOVA CONSULTA */

/* ASSUNTO DELIMITADOR
	;
 */

 create database aula_sql
 create database aula_sql02

/* clicar em executar e atualizar F5 */

/* a cada nova consulta aberta identifica o número da secção, 
ou seja, o número do usuário, usar o menor número possível de 
consultas para não travar o sistema */

use aula_sql

  create table teste(
	nome varchar(30)
 )
/* */

use aula_sql02
 /* */

create database BANCO01
 
 use BANCO01

  create table teste(
    nome varchar(30)
 )

/* PARA SE TORNAR OS COMANDOS SQL DE ASSÍNCRONOS EM SÍNCRONOS
DEVEMOS PÔR O COMANDO GO APÓS CADA SQL PARA ELE EXECUTAR EM ORDEM */

use aula_sql02
go

create database BANCO01
go

 use BANCO01
go

  create table teste(
    nome varchar(30)
 )
go

/* RECONMENDÁVEL SEPARAR O BANCO DE DADOS DO SIST. OPER. 
EM HDS DIFERENTES */

/* SÃO CRIADOS DOIS BANCO DE DADOS O MDF E LDF, MASTER DATA FILE 
(DADOS MESTRES EM ARQUIVO), LOG DATA FILE (LOGARITMOS DE DADOS EM
 ARQUIVOS). O MDF É SÓ PARA DADOS DO SISTEMA, DADOS DO DICIONÁRIO DE 
DADOS  */

/* PARA APAGAR DATABASE PODE SE CLICAR EM CIMA COM BOTÃO DIREITO
E EXCLUIR OU USAR O COMANDO

drop datyabase aula_sql02
go

/* ORGANIZAR FISICAMENTE E LOGICAMENTE UM BANCO DE DADOS

1- CRIAR O BANCO COM ARQUIVOS PARA OS SETORES DE MKT R RH
CLICAR EM BANDO DE DADOS COM DIREITO EM NOVO BANCO DE DADOS, 
DAR O NOME 
2- CRIAR UM ARQUIVO GERAL
3- DEIXAR O MDF APENAS COM O DICIONÁRIO DE DADOS
IR EM GRUPO DE ARQUIVOS PARA CRIAR OS GRUPO, DESMARCAR O PRIMARY 
E MARCAR O PADRÃO COMO O GA_GERAL
4- CRIAR 2 GRUPOS DE ARQUIVOS (PRIMARY - MDF)
*/

use empresa
go

create table TB_EMPRESA(
ID int,
NOME varchar(50)
)
GO

create table ALUNO(
  IDALUNO INT PRIMARY KEY IDENTITY,
  NOME varchar(30) NOT NULL,
  SEXO CHAR(1) NOT NULL,
  NASCIMENTO DATE NOT NULL,
  EMAIL VARCHAR(30) UNIQUE
)
GO

/* CONSTRAITS PARA O BD NÃO CRIAR UM NOME DA CHAVE E SIM NÓS*/
ALTER TABLE ALUNO
ADD CONSTRAINT CK_SEXO CHECK (SEXO IN('M','F'))
GO

/* 1 X 1 */
CREATE TABLE ENDERECO(
  IDENDERECO INT PRIMARY KEY IDENTITY(100, 10),
  BAIRRO VARCHAR(30),
  UF CHAR(2) NOT NULL
  CHECK (UF IN('RJ', 'SP', 'MG')),
 ID_ALUNO INT  UNIQUE
)
GO

/* CRIANDO A CHAVE ESTRANGEIRA FK */
ALTER TABLE ENDERECO ADD CONSTRAINT FK_ENDERECO_ALUNO
FOREIGN KEY (ID_ALUNO) REFERENCES ALUNO(IDALUNO)
GO

/* COMANDOS DE DESCRIÇÃO */
/* NO MY SQL SERVER FUNCIONA ATRAVÉS DE PROCEDURES, 
JÁ CRIADAS E ARMAZENADAS NO SISTEMA */

SP_COLUMNS ALUNO
GO

SP_HELP ALUNO
GO

/* INSERINDO DADOS */

INSERT INTO ALUNO VALUES('ANDRE', 'M', '1981/12/09', 'ANDRE@IG.COM')
INSERT INTO ALUNO VALUES('ANA', 'F', '1978/03/09', 'ANA@IG.COM')
INSERT INTO ALUNO VALUES('RUI', 'M', '1961/07/09', 'RUI@IG.COM')
INSERT INTO ALUNO VALUES('JOAO', 'M', '2002/11/09', 'JOAO@IG.COM')
GO

/* ENDERECO */
INSERT INTO ENDERECO VALUES('FLAMENGO', 'RJ', 1)
INSERT INTO ENDERECO VALUES('MORUMBI', 'SP',2)
INSERT INTO ENDERECO VALUES('CENTRO', 'MG', 4)
INSERT INTO ENDERECO VALUES('CENTRO', 'SP', 6)
GO

/* CRIANDO TABELAS TELEFONES */
CREATE TABLE TELEFONE(
      IDTELEFONE INT PRIMARY KEY IDENTITY,
      TIPO CHAR(3) NOT NULL,
      NUMERO VARCHAR(10) NOT NULL,
      ID_ALUNO INT,
      CHECK (TIPO IN('RES', 'COM', 'CEL'))
)
GO

INSERT INTO TELEFONE VALUES('CEL', '7899889', 1)
INSERT INTO TELEFONE VALUES('RES', '4325444', 1)
INSERT INTO TELEFONE VALUES('COM', '4325354', 2)
INSERT INTO TELEFONE VALUES('CEL', '2344556', 2)
GO

/* PEGAR A DATA ATUAL */
SELECT GETDATE()
GO

/* CLAUSULA AMBIGUA */
SELECT NOME, TIPO, NUMERO, BAIRRO, UF
FROM ALUNO
INNER JOIN TELEFONE
ON IDALUNO = ID_ALUNO
INNER JOIN ENDERECO
ON IDALUNO = ID_ALUNO
GO
/* Mensagem 209, Nível 16, Estado 1, Linha 6
Nome da coluna 'ID_ALUNO' ambíguo.*/

SELECT A.NOME, T.TIPO, T.NUMERO, E.BAIRRO, E.UF
FROM ALUNO A
INNER JOIN TELEFONE T
ON A.IDALUNO = T.ID_ALUNO
INNER JOIN ENDERECO E
ON A.IDALUNO = E.ID_ALUNO
GO


SELECT A.NOME, T.TIPO, T.NUMERO, E.BAIRRO, E.UF
FROM ALUNO A LEFT JOIN TELEFONE T
ON A.IDALUNO = T.ID_ALUNO
INNER JOIN ENDERECO E
ON A.IDALUNO = E.ID_ALUNO
GO

/*IFNULL*/
SELECT A.NOME,
      ISNULL(T.TIPO, 'SEM') AS "TIPO",
      ISNULL(T.NUMERO, 'NUMERO') AS "TELEFONE",
      ISNULL(E.BAIRRO,
      ISNULL(E.UF
FROM ALUNO A LEFT JOIN TELEFONE T
ON A.IDALUNO = T.ID_ALUNO
INNER JOIN ENDERECO E
ON A.IDALUNO = E.ID_ALUNO
GO

/* DATA */
